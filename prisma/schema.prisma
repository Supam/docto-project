// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ResearchCenter {
  id                Int @id @default(autoincrement())

  centerSymptoms    String[] @unique
  studyFields       Illness[]

  name              String
  addresses         String[]
  phoneNumber       String[]
  email             String[]

  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Study {
  id               Int @id @default(autoincrement())

  studySymptoms    String[] @unique
  illnesses        Illness[]

  name             String
  patientNb        Int
  state            String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Illness {
  id               Int @id @default(autoincrement())

  symptomsPatient  String[]
  illnessPatient   Patient  @relation(fields: [symptomsPatient], references: [patientSymptoms])
  symptomsDoctor   String[]
  illnessDoctor    Doctor  @relation(fields: [symptomsDoctor], references: [doctorSymptoms])
  symptomsCenter   String[]
  illnessCenter    ResearchCenter  @relation(fields: [symptomsCenter], references: [centerSymptoms])
  symptomsStudy    String[]
  illnessStudy     Study @relation(fields: [symptomsStudy], references: [studySymptoms])


  name             String @unique
  terminal         Boolean
  partsAffected    String[]
  symptoms         String[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Patient {
  id                Int @id @default(autoincrement())

  illnesses         Illness[]
  patientSymptoms   String[] @unique
  User              User?

  age               Int
  sex               String
  address           String
  nationality       String

  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Doctor {
  id                Int @id @default(autoincrement())

  studyFields       Illness[]
  doctorSymptoms    String[] @unique
  User              User?

  sex               String
  address           String
  nationality       String

  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id                Int @id @default(autoincrement())

  userPatient       Int? @unique
  patient           Patient? @relation(fields: [userPatient], references: [id])
  userDoctor        Int? @unique
  doctor            Doctor? @relation(fields: [userDoctor], references: [id])

  email             String @unique
  phoneNumber       String 
  username          String
  password          String

  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
