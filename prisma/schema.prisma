// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  SCHEDULED
  RECRUITING
  TESTING
  ANALYSING
  COMPLETED
}

model Condition {
  id Int @id @default(autoincrement())

  /// Many to Many
  doctors  ConditionsOnDoctors[]
  patients ConditionsOnPatients[]
  studies  ConditionsOnStudies[]

  name          String   @unique
  partsAffected String[]
  symptoms      String[]
  terminal      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConditionsOnDoctors {
  /// Many to Many
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  doctorId    Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  conditionId Int

  @@id([doctorId, conditionId])
}

model ConditionsOnPatients {
  /// Many to Many
  patient     Patient   @relation(fields: [patientId], references: [id])
  patientId   Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  conditionId Int

  @@id([patientId, conditionId])
}

model ConditionsOnStudies {
  /// Many to Many
  study       Study     @relation(fields: [studyId], references: [id])
  studyId     Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  conditionId Int

  @@id([studyId, conditionId])
}

model Doctor {
  id Int @id @default(autoincrement())

  /// One to One
  user       User                  @relation(fields: [userId], references: [id])
  userId     Int                   @unique
  /// Many to Many
  conditions ConditionsOnDoctors[]

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id Int @id @default(autoincrement())

  /// One to One
  user       User                   @relation(fields: [userId], references: [id])
  userId     Int                    @unique
  /// Many to Many
  conditions ConditionsOnPatients[]

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchCenter {
  id Int @id @default(autoincrement())

  /// One to Many
  studies Study[]

  addresses    String[]
  emails       String[]
  name         String   @unique
  phoneNumbers String[]

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Study {
  id Int @id @default(autoincrement())

  /// Many to One
  researchCenter   ResearchCenter        @relation(fields: [researchCenterId], references: [id])
  researchCenterId Int
  /// Many to Many
  conditions       ConditionsOnStudies[]

  name           String
  paperUrl       String?
  patientCurrent Int
  patientMax     Int
  state          State   @default(SCHEDULED)

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())

  /// One to One
  doctor  Doctor?
  patient Patient?

  address     String
  birthday    DateTime
  email       String   @unique
  nationality String
  password    String
  phoneNumber String   @unique
  sex         String
  username    String

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
